Given an array arr[] of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7

Example 1:
Input: N = 6, arr[] = {2, 3, 5, 6, 8, 10}
       sum = 10
Output: 3
Explanation: {2, 3, 5}, {2, 8}, {10} are 
possible subsets.

//Code :

int mod=1e9+7;
	
	int f(int i,int t,int sum,int arr[],int n, vector<vector<int>> &dp){
	    
	    if(i==n){
	        return 0;
	    }
	    
	    if(dp[i][t]!=-1){
	        return dp[i][t];
	    }
	    
	    int x=f(i+1,t,sum,arr,n,dp);
	    if(arr[i]+t<=sum){
	        if(arr[i]+t==sum){
	            x++;
	        }
	        
	        x+=f(i+1,t+arr[i],sum,arr,n,dp);
	    }
	    
	    return dp[i][t]= x%mod;
	}
	
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return f(0,0,sum,arr,n,dp);
	}
