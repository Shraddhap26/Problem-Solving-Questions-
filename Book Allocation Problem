/* Problem Statement
You are given an array ‘pages’ of integer numbers. In this array, the ‘pages[i]’ represents the number of pages in the ‘i-th’ book. There are ‘m’ number of students, and the task is to allocate all the books to the students. 

Allocate books in a way such that:

Each student gets at least one book.
Each book should be allocated to a student.
Book allocation should be in a contiguous manner.
 
You have to allocate the books to ‘m’ students such that the maximum number of pages assigned to a student is minimum. */
Return the least pages capacity of the books that will result in all the student.

Program :

#include <iostream>
using namespace std;
bool ispossible(int arr[],int n,int m,int mid){
  
    int pagesum=0;
    int studentcount=1;
   
    for(int j=0;j<n;j++){
        if((pagesum+arr[j])<=mid)
        {
            pagesum+=arr[j];
        }else
        {
            studentcount++;
            if(studentcount>m || arr[j]>mid){
                return false;
            }
            pagesum=arr[j];
        }
    }
    return true;
}

int bookallocation(int arr[],int n,int m){ //where n is number of array element and m is number of student.
  int sum=0;
   for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    int start=0,end=sum;
    int mid=(start+end)/2;
    int ans=-1;
    
    while(start<=end){
        if(ispossible(arr,n,m ,mid)){
            ans=mid;
           end=mid-1; 
        }else{
            start=mid+1;
        }
       mid=(start+end)/2;  
    }
    return ans;
}
int main() {
    int arr[5]={10,20,30,40,50};
   int ans=bookallocation(arr,5,2);
   cout<<ans;

    return 0;
}

Output :
90
