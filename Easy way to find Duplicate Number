//Write a program to find out duplicate number(v-10)   See third method 
//my program (method 1)
#include <iostream>
#include <iostream>
using namespace std;
int main() {
   int arr[5]={4,3,3,4,2};
 
   int len=sizeof(arr)/sizeof(arr[0]);
   cout<<len<<endl;
   //sorting
     for(int i=0;i<len;i+=1)
    {
        for(int j=i+1;j<len;j++){
             if(arr[i]>arr[j]){
          
               int temp=arr[i];
               arr[i]=arr[j];
               arr[j]=temp;
             }
        }
     
    }
    cout<<"Sorted array : ";
    for(int i=0;i<5;i++){
        cout<<arr[i]<<" ";
    }
    cout<<"\nDuplicate elements are:";
 //for Printing Duplicate numbers
    for(int i=0;i<len;i+=1)
    {
      if(arr[i]==arr[i+1]){
      cout<<arr[i]<<" ";
      }
    }
   
    return 0;
}

//Output :
5
Sorted array : 2 3 3 4 4 
Duplicate elements are:3 4 


//Method 2
//find only single duplicate value(for vector)
//program :
#include<vector>
using namespace std;
#include<iostream>
int findDuplicate(vector<int> &arr) 
{
    int ans = 0;
    
    //XOR ing all array elements
    for(int i = 0; i<arr.size(); i++ ) {
    	ans = ans^arr[i];
    }
	
    //XOR [1, n-1]
    for(int i = 1; i<arr.size();i++ ) {
    	ans = ans^i;
    }
    return ans;
}
int main(){
    vector<int> arr={2,1,3,2,4};
    int answer=findDuplicate(arr);
    cout<<answer;
    return 0;
} 

//output :
2


Method 3 and easiest:
int sockMerchant(int n, vector<int> ar) {
    
    unordered_map<int,bool>mp;
       int count=0;
        
        
        for(int i=0;i<n;i++){
            if(mp[ar[i]]==true){
                count+=1;
                mp[ar[i]]=false;
            }else{
                mp[ar[i]]=true;
            }
        }
        return count;

}
