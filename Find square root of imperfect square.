/*
Find square root of imperfect square (give answer in floating point)
*/
#include <iostream>
using namespace std;
int findsqtroot(int n){
     int s = 0;
        int e = n;
        long long int mid = s + (e-s)/2;
        long long int ans = -1;
        while(s<=e) { 
            long long int square = mid*mid;
            if(square == n)
            {
                return mid;     
            } 
            if(square < n ){
                ans = mid;
                s = mid+1;
            }
            else
            {
                e = mid - 1;
            }
            mid = s + (e-s)/2;
        }
        return ans;
}
double morePrecision(int n,int precision,int sqrttemvalue){
float factor=1;
float ans=sqrttemvalue;
 for(int j=0;j<precision;j++){
    factor=factor/10;
    for(float i=ans ; i*i<n ; i=i+factor){
      ans=i;
    }
}
return ans;
}

int main() {
    int ans=findsqtroot(38);
    float accurate_sqrt=morePrecision(38,3,ans);
    cout<<accurate_sqrt;
        return 0;
}
//Output :
5
